load("~/Griffith/Big Data Analytics/Lab3/2-1_Lab_Script.R")
setwd("C:/Users/perma/Documents/Griffith/Big Data Analytics/Lab3")
library(vosonSML)
library(igraph)
my_api_key <- "AIzaSyBgE9vk5dfvbKhwas04u6DaD_5mIRiUzdw"
yt_auth <- Authenticate("youtube", apiKey = my_api_key)
video_url <- c("https://www.youtube.com/watch?v=jNQXAC9IVRw")
yt_data <- yt_auth |> Collect(videoIDs = video_url,
maxComments = 200,
writeToFile = TRUE,
verbose = TRUE) # use 'verbose' to show download progress
saveRDS(yt_data, file = "yt_data.rds") # save as an R object
write.csv(yt_data, file = "yt_data.csv") # export as a CSV
yt_data <- readRDS("~/Griffith/Big Data Analytics/Lab3/yt_data.rds")
View(yt_data)
class(yt_data)
authors <- yt_data$AuthorDisplayName
authors[1:10]
authors[duplicated(authors)]
table(authors[duplicated(authors)])
yt_actor_network <- yt_data |> Create("actor")
yt_actor_graph <- yt_actor_network |> Graph()
plot(yt_actor_graph, vertex.label = "", vertex.size = 4, edge.arrow.size = 0.5)
rank_yt_actor <- sort(page_rank(yt_actor_graph)$vector, decreasing=TRUE)
rank_yt_actor[1:5]
V(yt_actor_graph)$name <- V(yt_actor_graph)$screen_name
rank_yt_actor <- sort(page_rank(yt_actor_graph)$vector, decreasing = TRUE)
rank_yt_actor[1:5] # <NA> because this is the original video
table(authors[duplicated(authors)])
library(spotifyr)
library(ggplot2)
library(ggridges)
app_id <- "7e9f2297a08e4b66ba790a39a1330998"
app_secret <- "8acb49b84d0d4714865b2c0b8f85405e"
token <- "1"
Sys.setenv(SPOTIFY_CLIENT_ID = app_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = app_secret)
access_token <- get_spotify_access_token()
find_my_artist <- search_spotify("Bruno Mars", type = "artist")
View(find_my_artist)
albums <- get_artist_albums("0du5cEVh5yTK9QJze8zA0C",
include_groups = c("album", "single", "appears_on", "compilation"))
View(albums)
songs <- get_album_tracks("4PgleR09JVnm3zY1fW3XBA")
View(songs)
song <- get_track_audio_features("6b8Be6ljOzmkOmFslEb23P")
View(song)
audio_features <- get_artist_audio_features("0du5cEVh5yTK9QJze8zA0C") # artist ID for Bruno Mars
View(audio_features)
ggplot(audio_features, aes(x = valence, y = album_name)) +
geom_density_ridges() +
theme_ridges() +
ggtitle("Happiness in Bruno Mars Albums",
subtitle = "Based on valence from Spotify's Web API")
related_bm <- get_related_artists("0du5cEVh5yTK9QJze8zA0C")
View(related_bm)
edges <- c()
edges <- append(edges, relatedartist)
edges <- c()
for (artist in related_bm$id){
related <- get_related_artists(artist)
artist_name <- get_artist(artist)$name
for (relatedartist in related$name){
edges <- append(edges, artist_name)
edges <- append(edges, relatedartist)
}
}
edges[1:10]
related_artists_graph <- graph(edges)
plot(related_artists_graph, vertex.label = "", vertex.size = 4, edge.arrow.size = 0.5)
write_graph(related_artists_graph, file = "RelatedArtists.graphml", format = "graphml")
# Remember to save your data
save.image(file = "2-1_Lab_Data.RData")
